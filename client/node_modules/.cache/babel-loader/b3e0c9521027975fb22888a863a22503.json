{"ast":null,"code":"var _jsxFileName = \"/home/ekaterina/quiz/client/src/app/component/questions/Questions.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Button } from \"src/app/component/button/Button\";\nimport { Paragraph } from \"src/app/component/paragraph/Paragraph\";\nimport { useGetQuestions } from \"src/app/component/questions/UseGetQuestions\";\n/**\n * Quiz component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Questions = () => {\n  _s();\n\n  // Call custom hook\n  const [score, questionIndex, answer, question, methods] = useGetQuestions();\n  /**\n  * If index of question less then length of array with questions,\n   * then new question will show on the page, if not - then result will show\n  */\n\n  if (question) {\n    if (questionIndex < question.length) {\n      var _question$questionInd, _question$questionInd2;\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: (_question$questionInd = question[questionIndex]) === null || _question$questionInd === void 0 ? void 0 : _question$questionInd.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this), (_question$questionInd2 = question[questionIndex]) === null || _question$questionInd2 === void 0 ? void 0 : _question$questionInd2.choices.map(c => {\n          var _question$questionInd3;\n\n          return /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: \"choice\",\n                value: c,\n                onChange: methods.onChange,\n                checked: answer === c\n              }, (_question$questionInd3 = question[questionIndex]) === null || _question$questionInd3 === void 0 ? void 0 : _question$questionInd3.key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: c\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 17\n            }, this)\n          }, c, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Check\",\n          handleClick: methods.submit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n          text: `score: ${score}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      title: \"Restart\",\n      handleClick: methods.restart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n      text: `score: ${score}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Questions, \"HBblAi6tHHc2lO6VgSHTVxa3OZA=\", false, function () {\n  return [useGetQuestions];\n});\n\n_c = Questions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","Button","Paragraph","useGetQuestions","Questions","score","questionIndex","answer","question","methods","length","choices","map","c","onChange","key","submit","restart"],"sources":["/home/ekaterina/quiz/client/src/app/component/questions/Questions.tsx"],"sourcesContent":["import React from \"react\";\nimport {Button} from \"src/app/component/button/Button\";\nimport {Paragraph} from \"src/app/component/paragraph/Paragraph\";\nimport {useGetQuestions} from \"src/app/component/questions/UseGetQuestions\";\n\n/**\n * Quiz component\n */\nexport const Questions: React.FC = () => {\n\n  // Call custom hook\n  const [score, questionIndex, answer, question, methods] = useGetQuestions();\n\n  /**\n\t * If index of question less then length of array with questions,\n   * then new question will show on the page, if not - then result will show\n\t */\n  if (question) {\n    if (questionIndex < question.length) {\n      return (\n        <>\n          <label>\n            <h3>\n              {question[questionIndex]?.question}\n            </h3>\n          </label>\n          {question[questionIndex]?.choices.map((c: string) => {\n            return (\n              <h5 key={c}>\n                <label>\n                  <input\n                    type=\"radio\"\n                    name=\"choice\"\n                    value={c}\n                    onChange={methods.onChange}\n                    checked={answer === c}\n                    key={question[questionIndex]?.key}\n                  />\n                  <span>{c}</span>\n                </label>\n              </h5>\n            );\n          })}\n          <Button text=\"Check\" handleClick={methods.submit} />\n          <Paragraph text={`score: ${score}`} />\n        </>\n      );\n    }\n  }\n\n  return (\n    <>\n      <Button title=\"Restart\" handleClick={methods.restart} />\n      <Paragraph text={`score: ${score}`} />\n    </>\n  );\n};"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,iCAArB;AACA,SAAQC,SAAR,QAAwB,uCAAxB;AACA,SAAQC,eAAR,QAA8B,6CAA9B;AAEA;AACA;AACA;;;;AACA,OAAO,MAAMC,SAAmB,GAAG,MAAM;EAAA;;EAEvC;EACA,MAAM,CAACC,KAAD,EAAQC,aAAR,EAAuBC,MAAvB,EAA+BC,QAA/B,EAAyCC,OAAzC,IAAoDN,eAAe,EAAzE;EAEA;AACF;AACA;AACA;;EACE,IAAIK,QAAJ,EAAc;IACZ,IAAIF,aAAa,GAAGE,QAAQ,CAACE,MAA7B,EAAqC;MAAA;;MACnC,oBACE;QAAA,wBACE;UAAA,uBACE;YAAA,mCACGF,QAAQ,CAACF,aAAD,CADX,0DACG,sBAAyBE;UAD5B;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QADF,4BAMGA,QAAQ,CAACF,aAAD,CANX,2DAMG,uBAAyBK,OAAzB,CAAiCC,GAAjC,CAAsCC,CAAD,IAAe;UAAA;;UACnD,oBACE;YAAA,uBACE;cAAA,wBACE;gBACE,IAAI,EAAC,OADP;gBAEE,IAAI,EAAC,QAFP;gBAGE,KAAK,EAAEA,CAHT;gBAIE,QAAQ,EAAEJ,OAAO,CAACK,QAJpB;gBAKE,OAAO,EAAEP,MAAM,KAAKM;cALtB,6BAMOL,QAAQ,CAACF,aAAD,CANf,2DAMO,uBAAyBS,GANhC;gBAAA;gBAAA;gBAAA;cAAA,QADF,eASE;gBAAA,UAAOF;cAAP;gBAAA;gBAAA;gBAAA;cAAA,QATF;YAAA;cAAA;cAAA;cAAA;YAAA;UADF,GAASA,CAAT;YAAA;YAAA;YAAA;UAAA,QADF;QAeD,CAhBA,CANH,eAuBE,QAAC,MAAD;UAAQ,IAAI,EAAC,OAAb;UAAqB,WAAW,EAAEJ,OAAO,CAACO;QAA1C;UAAA;UAAA;UAAA;QAAA,QAvBF,eAwBE,QAAC,SAAD;UAAW,IAAI,EAAG,UAASX,KAAM;QAAjC;UAAA;UAAA;UAAA;QAAA,QAxBF;MAAA,gBADF;IA4BD;EACF;;EAED,oBACE;IAAA,wBACE,QAAC,MAAD;MAAQ,KAAK,EAAC,SAAd;MAAwB,WAAW,EAAEI,OAAO,CAACQ;IAA7C;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,SAAD;MAAW,IAAI,EAAG,UAASZ,KAAM;IAAjC;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA,gBADF;AAMD,CAhDM;;GAAMD,S;UAG+CD,e;;;KAH/CC,S"},"metadata":{},"sourceType":"module"}