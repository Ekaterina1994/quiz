{"ast":null,"code":"import { FetchMethod } from \"./enu\";\nimport { convertToProject } from \"./convert\"; // import { questionsRoundDTO } from \"./IQuestionsDTO\";\n\nconst request = async (url, method, body) => {\n  const stringifiedBody = JSON.stringify(body);\n  const rawResponse = await fetch(url, {\n    method,\n    headers: {\n      accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: stringifiedBody\n  }); // обработка ответа\n\n  if (rawResponse.ok) {\n    return method !== FetchMethod.DELETE ? rawResponse.json() : undefined;\n  }\n\n  throw new Error(String(rawResponse.status));\n};\n\nexport const fetchRequest = {\n  /**\n  * Создание get запроса\n  */\n  get: async url => {\n    return request(url, FetchMethod.GET);\n  }\n};\n/**\n * Class which use when the client have internet\n */\n\nexport class QuizService {\n  constructor(baseUrl) {\n    this.baseUrl = void 0;\n    this.baseUrl = baseUrl;\n  }\n  /**\n  * Method which return data\n  */\n\n\n  async getQuestions() {\n    const url = this.baseUrl;\n    const {\n      content: questionsRoundDTO\n    } = await fetchRequest.get(url);\n    const questions = questionsRoundDTO.map(convertToProject);\n    return questions;\n  }\n\n}","map":{"version":3,"names":["FetchMethod","convertToProject","request","url","method","body","stringifiedBody","JSON","stringify","rawResponse","fetch","headers","accept","ok","DELETE","json","undefined","Error","String","status","fetchRequest","get","GET","QuizService","constructor","baseUrl","getQuestions","content","questionsRoundDTO","questions","map"],"sources":["/home/ekaterina/quiz/client/src/app/service/QuizService.ts"],"sourcesContent":["import {QuizRound} from \"src/app/model/QuizRoundModel\";\nimport {FetchMethod} from \"./enu\";\nimport {DTO} from \"./typ\";\nimport {convertToDTOProject, convertToProject} from \"./convert\";\n// import { questionsRoundDTO } from \"./IQuestionsDTO\";\n\nconst request = async (url: string, method: FetchMethod, body?: unknown | undefined) => {\n  const stringifiedBody = JSON.stringify(body);\n  const rawResponse = await fetch(url, {\n    method,\n    headers: {\n      accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: stringifiedBody,\n  });\n\n  // обработка ответа\n  if (rawResponse.ok) {\n    return method !== FetchMethod.DELETE\n      ? rawResponse.json()\n      : undefined;\n  }\n\n  throw new Error(String(rawResponse.status));\n};\n\nexport const fetchRequest = {\n\n  /**\n\t * Создание get запроса\n\t */\n  get: async <T>(url: string): Promise<T> => {return request(url, FetchMethod.GET);},\n\n};\n\n/**\n * Class which use when the client have internet\n */\nexport class QuizService {\n\n  private baseUrl: string;\n\n  constructor(baseUrl: string) {\n    this.baseUrl = baseUrl;\n  }\n\n  /**\n\t * Method which return data\n\t */\n  public async getQuestions(): Promise<QuizRound[]> {\n    const url = this.baseUrl;\n    const {content: questionsRoundDTO} = await fetchRequest.get(url);\n\n    const questions = questionsRoundDTO.map(convertToProject);\n\n    return questions;\n  }\n\n}\n"],"mappings":"AACA,SAAQA,WAAR,QAA0B,OAA1B;AAEA,SAA6BC,gBAA7B,QAAoD,WAApD,C,CACA;;AAEA,MAAMC,OAAO,GAAG,OAAOC,GAAP,EAAoBC,MAApB,EAAyCC,IAAzC,KAAwE;EACtF,MAAMC,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAxB;EACA,MAAMI,WAAW,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAM;IACnCC,MADmC;IAEnCO,OAAO,EAAE;MACPC,MAAM,EAAE,kBADD;MAEP,gBAAgB;IAFT,CAF0B;IAMnCP,IAAI,EAAEC;EAN6B,CAAN,CAA/B,CAFsF,CAWtF;;EACA,IAAIG,WAAW,CAACI,EAAhB,EAAoB;IAClB,OAAOT,MAAM,KAAKJ,WAAW,CAACc,MAAvB,GACHL,WAAW,CAACM,IAAZ,EADG,GAEHC,SAFJ;EAGD;;EAED,MAAM,IAAIC,KAAJ,CAAUC,MAAM,CAACT,WAAW,CAACU,MAAb,CAAhB,CAAN;AACD,CAnBD;;AAqBA,OAAO,MAAMC,YAAY,GAAG;EAE1B;AACF;AACA;EACEC,GAAG,EAAE,MAAUlB,GAAV,IAAsC;IAAC,OAAOD,OAAO,CAACC,GAAD,EAAMH,WAAW,CAACsB,GAAlB,CAAd;EAAsC;AALxD,CAArB;AASP;AACA;AACA;;AACA,OAAO,MAAMC,WAAN,CAAkB;EAIvBC,WAAW,CAACC,OAAD,EAAkB;IAAA,KAFrBA,OAEqB;IAC3B,KAAKA,OAAL,GAAeA,OAAf;EACD;EAED;AACF;AACA;;;EAC2B,MAAZC,YAAY,GAAyB;IAChD,MAAMvB,GAAG,GAAG,KAAKsB,OAAjB;IACA,MAAM;MAACE,OAAO,EAAEC;IAAV,IAA+B,MAAMR,YAAY,CAACC,GAAb,CAAiBlB,GAAjB,CAA3C;IAEA,MAAM0B,SAAS,GAAGD,iBAAiB,CAACE,GAAlB,CAAsB7B,gBAAtB,CAAlB;IAEA,OAAO4B,SAAP;EACD;;AAlBsB"},"metadata":{},"sourceType":"module"}