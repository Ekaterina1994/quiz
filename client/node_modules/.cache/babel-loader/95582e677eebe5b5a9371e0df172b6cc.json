{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useFetch } from \"src/app/component/questions/useFetch\";\n\nconst getAnswerByQuestionIndex = (index, questionsList) => {\n  const question = questionsList[index];\n\n  if (!question) {\n    throw new Error(\"wrong index in array\");\n  }\n\n  return question.rightAnswer;\n};\n/**\n * Custom hook\n * @returns score, questionIndex, answer, data and methods: onChange, submit, restart\n */\n\n\nexport const useGetQuestions = () => {\n  _s();\n\n  const [score, setScore] = useState(0);\n  const [questions] = useFetch();\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [answer, setAnswer] = useState(\"\");\n\n  const restart = () => {\n    setScore(0);\n    setAnswer(\"\");\n    setQuestionIndex(0);\n  }; // Send answer. If its right answer - number of points grow\n\n\n  const submit = event => {\n    event.preventDefault();\n    const rightAnswer = getAnswerByQuestionIndex(questionIndex, questions);\n    const isRightAnswer = answer === rightAnswer;\n    const isMoreQuestionsAvailable = questionIndex < questions.length;\n\n    if (isRightAnswer) {\n      setScore(score + 1);\n    }\n\n    if (isMoreQuestionsAvailable) {\n      setQuestionIndex(questionIndex + 1);\n    }\n  }; // Keeps track of the selected answer\n  // const onChange: (e: React.ChangeEvent<HTMLInputElement>) => void = (e: React.ChangeEvent<HTMLInputElement>) => {\n  //   setAnswer(e.target.value);\n  // };\n  // alias\n\n\n  const checkAnswer = e => {\n    setAnswer(e.target.value);\n  };\n\n  const methods = {\n    checkAnswer,\n    submit,\n    restart\n  };\n  return [score, questionIndex, answer, questions, methods];\n};\n\n_s(useGetQuestions, \"MAo2ZquSBfKlkQ11sp+uvjzlmlY=\", false, function () {\n  return [useFetch];\n});","map":{"version":3,"names":["useState","useFetch","getAnswerByQuestionIndex","index","questionsList","question","Error","rightAnswer","useGetQuestions","score","setScore","questions","questionIndex","setQuestionIndex","answer","setAnswer","restart","submit","event","preventDefault","isRightAnswer","isMoreQuestionsAvailable","length","checkAnswer","e","target","value","methods"],"sources":["/home/ekaterina/quiz/client/src/app/component/questions/UseGetQuestions.ts"],"sourcesContent":["import React, {useState} from \"react\";\nimport {QuizRoundModel} from \"src/app/model/QuizRoundModel\";\nimport {useFetch} from \"src/app/component/questions/useFetch\";\n\nconst getAnswerByQuestionIndex = (index: number, questionsList: QuizRoundModel[]): string => {\n  const question: QuizRoundModel | undefined = questionsList[index];\n  if (!question) {\n    throw new Error(\"wrong index in array\");\n  }\n  return question.rightAnswer;\n};\n\n/**\n * Custom hook\n * @returns score, questionIndex, answer, data and methods: onChange, submit, restart\n */\nexport const useGetQuestions = (): [\n  number,\n  number,\n  string,\n  QuizRoundModel[],\n  {\n    checkAnswer: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    submit: (event: React.MouseEvent) => void;\n    restart: () => void;\n  }] => {\n\n  const [score, setScore] = useState<number>(0);\n  const [questions] = useFetch();\n  const [questionIndex, setQuestionIndex] = useState<number>(0);\n  const [answer, setAnswer] = useState<string>(\"\");\n\n  const restart: () => void = () => {\n    setScore(0);\n    setAnswer(\"\");\n    setQuestionIndex(0);\n  };\n\n  // Send answer. If its right answer - number of points grow\n  const submit: (event: React.MouseEvent) => void = (\n    event: React.MouseEvent,\n  ) => {\n    event.preventDefault();\n\n    const rightAnswer = getAnswerByQuestionIndex(questionIndex, questions);\n    const isRightAnswer: boolean = answer === rightAnswer;\n    const isMoreQuestionsAvailable: boolean = questionIndex < questions.length;\n\n    if (isRightAnswer) {\n      setScore(score + 1);\n    }\n\n    if (isMoreQuestionsAvailable) {\n      setQuestionIndex(questionIndex + 1);\n    }\n  };\n\n  // Keeps track of the selected answer\n  // const onChange: (e: React.ChangeEvent<HTMLInputElement>) => void = (e: React.ChangeEvent<HTMLInputElement>) => {\n  //   setAnswer(e.target.value);\n  // };\n\t// alias\n\ttype OnChangeHandler<T> = (e: React.ChangeEvent<T>) => void;\n\tconst checkAnswer: OnChangeHandler<HTMLInputElement> = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetAnswer(e.target.value);\n\t};\n\n\tconst methods = {checkAnswer, submit, restart};\n\n\treturn [score, questionIndex, answer, questions, methods];\n};\n"],"mappings":";;AAAA,SAAeA,QAAf,QAA8B,OAA9B;AAEA,SAAQC,QAAR,QAAuB,sCAAvB;;AAEA,MAAMC,wBAAwB,GAAG,CAACC,KAAD,EAAgBC,aAAhB,KAA4D;EAC3F,MAAMC,QAAoC,GAAGD,aAAa,CAACD,KAAD,CAA1D;;EACA,IAAI,CAACE,QAAL,EAAe;IACb,MAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;EACD;;EACD,OAAOD,QAAQ,CAACE,WAAhB;AACD,CAND;AAQA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,eAAe,GAAG,MASvB;EAAA;;EAEN,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAS,CAAT,CAAlC;EACA,MAAM,CAACW,SAAD,IAAcV,QAAQ,EAA5B;EACA,MAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAS,CAAT,CAAlD;EACA,MAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAS,EAAT,CAApC;;EAEA,MAAMgB,OAAmB,GAAG,MAAM;IAChCN,QAAQ,CAAC,CAAD,CAAR;IACAK,SAAS,CAAC,EAAD,CAAT;IACAF,gBAAgB,CAAC,CAAD,CAAhB;EACD,CAJD,CAPM,CAaN;;;EACA,MAAMI,MAAyC,GAC7CC,KADgD,IAE7C;IACHA,KAAK,CAACC,cAAN;IAEA,MAAMZ,WAAW,GAAGL,wBAAwB,CAACU,aAAD,EAAgBD,SAAhB,CAA5C;IACA,MAAMS,aAAsB,GAAGN,MAAM,KAAKP,WAA1C;IACA,MAAMc,wBAAiC,GAAGT,aAAa,GAAGD,SAAS,CAACW,MAApE;;IAEA,IAAIF,aAAJ,EAAmB;MACjBV,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;IACD;;IAED,IAAIY,wBAAJ,EAA8B;MAC5BR,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;IACD;EACF,CAhBD,CAdM,CAgCN;EACA;EACA;EACA;EACD;;;EAEA,MAAMW,WAA8C,GAAIC,CAAD,IAA4C;IAClGT,SAAS,CAACS,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;EACA,CAFD;;EAIA,MAAMC,OAAO,GAAG;IAACJ,WAAD;IAAcN,MAAd;IAAsBD;EAAtB,CAAhB;EAEA,OAAO,CAACP,KAAD,EAAQG,aAAR,EAAuBE,MAAvB,EAA+BH,SAA/B,EAA0CgB,OAA1C,CAAP;AACA,CAtDM;;GAAMnB,e;UAYSP,Q"},"metadata":{},"sourceType":"module"}