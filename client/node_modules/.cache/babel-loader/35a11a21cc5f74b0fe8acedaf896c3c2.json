{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useFetch } from \"src/app/component/questions/useFetch\";\n/**\n * Custom hook\n * @returns score, questionIndex, answer, data and methods: onChange, submit, restart\n */\n\nexport const useGetQuestions = () => {\n  _s();\n\n  const [score, setScore] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [answer, setAnswer] = useState(\"\");\n  const [questions] = useFetch(); // Set Score to 0\n\n  const restart = () => {\n    setScore(0);\n    setAnswer(\"\");\n    setQuestionIndex(0);\n  }; // Send answer. If its right answer - number of points grow\n\n\n  const submit = event => {\n    event.preventDefault();\n\n    if (questions) {\n      const getAnswerByQuestionIndex = (index, questionsList) => {\n        const question = questionsList[index];\n\n        if (!question) {\n          throw new Error(\"wrong index in array\");\n        }\n\n        return question.rightAnswer;\n      };\n\n      const isRightAnswer = answer === getAnswerByQuestionIndex(questionIndex);\n\n      if (isRightAnswer) {\n        setScore(score + 1);\n      }\n    }\n\n    const isMoreQuestionsAvailable = questionIndex < questions.length;\n\n    if (isMoreQuestionsAvailable) {\n      setQuestionIndex(questionIndex + 1);\n    }\n  }; // Keeps track of the selected answer\n\n\n  const onChange = e => {\n    setAnswer(e.target.value);\n  };\n\n  const methods = {\n    onChange,\n    submit,\n    restart\n  };\n  return [score, questionIndex, answer, questions, methods];\n};\n\n_s(useGetQuestions, \"/IMTFIIN7g7I3y5swCjJhwebdFE=\", false, function () {\n  return [useFetch];\n});","map":{"version":3,"names":["useState","useFetch","useGetQuestions","score","setScore","questionIndex","setQuestionIndex","answer","setAnswer","questions","restart","submit","event","preventDefault","getAnswerByQuestionIndex","index","questionsList","question","Error","rightAnswer","isRightAnswer","isMoreQuestionsAvailable","length","onChange","e","target","value","methods"],"sources":["/home/ekaterina/quiz/client/src/app/component/questions/UseGetQuestions.ts"],"sourcesContent":["import React, {useState} from \"react\";\nimport {QuizRoundModel} from \"src/app/model/QuizRoundModel\";\nimport {useFetch} from \"src/app/component/questions/useFetch\";\n\n/**\n * Custom hook\n * @returns score, questionIndex, answer, data and methods: onChange, submit, restart\n */\nexport const useGetQuestions = (): [\n  number,\n  number,\n  string,\n  QuizRoundModel[],\n  {\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    submit: (event: React.MouseEvent) => void;\n    restart: () => void;\n  }] => {\n\n  const [score, setScore] = useState<number>(0);\n  const [questionIndex, setQuestionIndex] = useState<number>(0);\n  const [answer, setAnswer] = useState<string>(\"\");\n  const [questions] = useFetch();\n\n  // Set Score to 0\n  const restart: () => void = () => {\n    setScore(0);\n    setAnswer(\"\");\n    setQuestionIndex(0);\n  };\n\n  // Send answer. If its right answer - number of points grow\n  const submit: (event: React.MouseEvent) => void = (\n    event: React.MouseEvent,\n  ) => {\n    event.preventDefault();\n    if (questions) {\n      const getAnswerByQuestionIndex = (index: number, questionsList: QuizRoundModel[]): string => {\n        const question: QuizRoundModel | undefined = questionsList[index];\n        if (!question) {\n          throw new Error(\"wrong index in array\");\n        }\n        return question.rightAnswer;\n      };\n\n      const isRightAnswer: boolean = answer === getAnswerByQuestionIndex(questionIndex, );\n      if (isRightAnswer) {\n        setScore(score + 1);\n      }\n    }\n    const isMoreQuestionsAvailable: boolean = questionIndex < questions.length;\n    if (isMoreQuestionsAvailable) {\n      setQuestionIndex(questionIndex + 1);\n    }\n\n  };\n\n  // Keeps track of the selected answer\n  const onChange: (e: React.ChangeEvent<HTMLInputElement>) => void = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setAnswer(e.target.value);\n  };\n\n  const methods = {onChange, submit, restart};\n\n  return [score, questionIndex, answer, questions, methods];\n};"],"mappings":";;AAAA,SAAeA,QAAf,QAA8B,OAA9B;AAEA,SAAQC,QAAR,QAAuB,sCAAvB;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAG,MASvB;EAAA;;EAEN,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAS,CAAT,CAAlC;EACA,MAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAS,CAAT,CAAlD;EACA,MAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAS,EAAT,CAApC;EACA,MAAM,CAACS,SAAD,IAAcR,QAAQ,EAA5B,CALM,CAON;;EACA,MAAMS,OAAmB,GAAG,MAAM;IAChCN,QAAQ,CAAC,CAAD,CAAR;IACAI,SAAS,CAAC,EAAD,CAAT;IACAF,gBAAgB,CAAC,CAAD,CAAhB;EACD,CAJD,CARM,CAcN;;;EACA,MAAMK,MAAyC,GAC7CC,KADgD,IAE7C;IACHA,KAAK,CAACC,cAAN;;IACA,IAAIJ,SAAJ,EAAe;MACb,MAAMK,wBAAwB,GAAG,CAACC,KAAD,EAAgBC,aAAhB,KAA4D;QAC3F,MAAMC,QAAoC,GAAGD,aAAa,CAACD,KAAD,CAA1D;;QACA,IAAI,CAACE,QAAL,EAAe;UACb,MAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;QACD;;QACD,OAAOD,QAAQ,CAACE,WAAhB;MACD,CAND;;MAQA,MAAMC,aAAsB,GAAGb,MAAM,KAAKO,wBAAwB,CAACT,aAAD,CAAlE;;MACA,IAAIe,aAAJ,EAAmB;QACjBhB,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;MACD;IACF;;IACD,MAAMkB,wBAAiC,GAAGhB,aAAa,GAAGI,SAAS,CAACa,MAApE;;IACA,IAAID,wBAAJ,EAA8B;MAC5Bf,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;IACD;EAEF,CAvBD,CAfM,CAwCN;;;EACA,MAAMkB,QAA0D,GAAIC,CAAD,IAA4C;IAC7GhB,SAAS,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;EACD,CAFD;;EAIA,MAAMC,OAAO,GAAG;IAACJ,QAAD;IAAWZ,MAAX;IAAmBD;EAAnB,CAAhB;EAEA,OAAO,CAACP,KAAD,EAAQE,aAAR,EAAuBE,MAAvB,EAA+BE,SAA/B,EAA0CkB,OAA1C,CAAP;AACD,CAzDM;;GAAMzB,e;UAcSD,Q"},"metadata":{},"sourceType":"module"}