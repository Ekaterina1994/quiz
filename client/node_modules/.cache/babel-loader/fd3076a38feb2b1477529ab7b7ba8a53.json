{"ast":null,"code":"var _jsxFileName = \"/home/ekaterina/quiz/client/src/app/component/questions/Questions.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Button } from \"src/app/component/button/Button\";\nimport { Paragraph } from \"src/app/component/paragraph/Paragraph\";\nimport { useGetQuestions } from \"src/app/component/questions/UseGetQuestions\";\n/**\n * Quiz component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Questions = () => {\n  _s();\n\n  // Call custom hook\n  const [score, questionIndex, answer, question, methods] = useGetQuestions();\n\n  const renderQuestionElement = c => {\n    var _question$questionInd;\n\n    return /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"choice\",\n          value: c,\n          onChange: methods.onChange,\n          checked: answer === c\n        }, (_question$questionInd = question[questionIndex]) === null || _question$questionInd === void 0 ? void 0 : _question$questionInd.key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: c\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)\n    }, c, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderQuestions = () => {};\n  /**\n  * If index of question less then length of array with questions,\n   * then new question will show on the page, if not - then result will show\n  */\n\n\n  if (question && questionIndex < question.length) {\n    var _question$questionInd2, _question$questionInd3;\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: (_question$questionInd2 = question[questionIndex]) === null || _question$questionInd2 === void 0 ? void 0 : _question$questionInd2.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), (_question$questionInd3 = question[questionIndex]) === null || _question$questionInd3 === void 0 ? void 0 : _question$questionInd3.choices.map(renderQuestionElement), /*#__PURE__*/_jsxDEV(Button, {\n        title: \"Check\",\n        handleClick: methods.submit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n        text: `score: ${score}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      title: \"Restart\",\n      handleClick: methods.restart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n      text: `score: ${score}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Questions, \"HBblAi6tHHc2lO6VgSHTVxa3OZA=\", false, function () {\n  return [useGetQuestions];\n});\n\n_c = Questions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","Button","Paragraph","useGetQuestions","Questions","score","questionIndex","answer","question","methods","renderQuestionElement","c","onChange","key","renderQuestions","length","choices","map","submit","restart"],"sources":["/home/ekaterina/quiz/client/src/app/component/questions/Questions.tsx"],"sourcesContent":["import React from \"react\";\nimport {Button} from \"src/app/component/button/Button\";\nimport {Paragraph} from \"src/app/component/paragraph/Paragraph\";\nimport {useGetQuestions} from \"src/app/component/questions/UseGetQuestions\";\n\n/**\n * Quiz component\n */\nexport const Questions: React.FC = () => {\n\n  // Call custom hook\n  const [score, questionIndex, answer, question, methods] = useGetQuestions();\n\n  const renderQuestionElement = (c: string) => {\n    return (\n      <h5 key={c}>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"choice\"\n            value={c}\n            onChange={methods.onChange}\n            checked={answer === c}\n            key={question[questionIndex]?.key}\n          />\n          <span>{c}</span>\n        </label>\n      </h5>\n    );\n  };\n\n  const renderQuestions = (): any => {\n\t\t\n  };\n\n  /**\n\t * If index of question less then length of array with questions,\n   * then new question will show on the page, if not - then result will show\n\t */\n  if (question && questionIndex < question.length) {\n    return (\n      <>\n        <label>\n          <h3>\n            {question[questionIndex]?.question}\n          </h3>\n        </label>\n        {question[questionIndex]?.choices.map(renderQuestionElement)}\n        <Button title=\"Check\" handleClick={methods.submit} />\n        <Paragraph text={`score: ${score}`} />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Button title=\"Restart\" handleClick={methods.restart} />\n      <Paragraph text={`score: ${score}`} />\n    </>\n  );\n};"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,iCAArB;AACA,SAAQC,SAAR,QAAwB,uCAAxB;AACA,SAAQC,eAAR,QAA8B,6CAA9B;AAEA;AACA;AACA;;;;AACA,OAAO,MAAMC,SAAmB,GAAG,MAAM;EAAA;;EAEvC;EACA,MAAM,CAACC,KAAD,EAAQC,aAAR,EAAuBC,MAAvB,EAA+BC,QAA/B,EAAyCC,OAAzC,IAAoDN,eAAe,EAAzE;;EAEA,MAAMO,qBAAqB,GAAIC,CAAD,IAAe;IAAA;;IAC3C,oBACE;MAAA,uBACE;QAAA,wBACE;UACE,IAAI,EAAC,OADP;UAEE,IAAI,EAAC,QAFP;UAGE,KAAK,EAAEA,CAHT;UAIE,QAAQ,EAAEF,OAAO,CAACG,QAJpB;UAKE,OAAO,EAAEL,MAAM,KAAKI;QALtB,4BAMOH,QAAQ,CAACF,aAAD,CANf,0DAMO,sBAAyBO,GANhC;UAAA;UAAA;UAAA;QAAA,QADF,eASE;UAAA,UAAOF;QAAP;UAAA;UAAA;UAAA;QAAA,QATF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF,GAASA,CAAT;MAAA;MAAA;MAAA;IAAA,QADF;EAeD,CAhBD;;EAkBA,MAAMG,eAAe,GAAG,MAAW,CAElC,CAFD;EAIA;AACF;AACA;AACA;;;EACE,IAAIN,QAAQ,IAAIF,aAAa,GAAGE,QAAQ,CAACO,MAAzC,EAAiD;IAAA;;IAC/C,oBACE;MAAA,wBACE;QAAA,uBACE;UAAA,oCACGP,QAAQ,CAACF,aAAD,CADX,2DACG,uBAAyBE;QAD5B;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF,4BAMGA,QAAQ,CAACF,aAAD,CANX,2DAMG,uBAAyBU,OAAzB,CAAiCC,GAAjC,CAAqCP,qBAArC,CANH,eAOE,QAAC,MAAD;QAAQ,KAAK,EAAC,OAAd;QAAsB,WAAW,EAAED,OAAO,CAACS;MAA3C;QAAA;QAAA;QAAA;MAAA,QAPF,eAQE,QAAC,SAAD;QAAW,IAAI,EAAG,UAASb,KAAM;MAAjC;QAAA;QAAA;QAAA;MAAA,QARF;IAAA,gBADF;EAYD;;EAED,oBACE;IAAA,wBACE,QAAC,MAAD;MAAQ,KAAK,EAAC,SAAd;MAAwB,WAAW,EAAEI,OAAO,CAACU;IAA7C;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,SAAD;MAAW,IAAI,EAAG,UAASd,KAAM;IAAjC;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA,gBADF;AAMD,CApDM;;GAAMD,S;UAG+CD,e;;;KAH/CC,S"},"metadata":{},"sourceType":"module"}