{"ast":null,"code":"var _jsxFileName = \"/home/ekaterina/quiz/client/src/app/component/questions/Questions.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Button } from \"src/app/component/button/Button\";\nimport { Paragraph, PARAGRAPH_STYLES } from \"src/app/component/paragraph/Paragraph\";\nimport { useQuizMethods } from \"src/app/component/questions/UseQuizMethods\";\nimport { getChoicesByQuestionIndex, getQuestionByQuestionIndex } from \"src/app/component/questions/Helpers\";\nimport { Headline } from \"src/app/component/headline/Headline\";\n/**\n * Component for displaying quiz questions and answer options\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Questions = () => {\n  _s();\n\n  const [score, questionIndex, answer, questions, methods] = useQuizMethods();\n\n  const renderAnswerElement = (choice, index) => {\n    return /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        name: \"choice\",\n        value: choice,\n        onChange: methods.checkAnswer,\n        checked: answer === choice\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: PARAGRAPH_STYLES,\n        children: choice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, choice, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderAnswers = () => {\n    const choicesChoices = getChoicesByQuestionIndex(questionIndex, questions);\n    return choicesChoices.map(renderAnswerElement);\n  };\n\n  const isLastQuestion = questionIndex < questions.length;\n\n  if (isLastQuestion) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Headline, {\n        text: getQuestionByQuestionIndex(questionIndex, questions)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), renderAnswers(), /*#__PURE__*/_jsxDEV(Button, {\n        title: \"Check\",\n        handleClick: methods.submit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n        text: `score: ${score}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      title: \"Restart\",\n      handleClick: methods.restart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n      text: `score: ${score}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Questions, \"NGAi0iFGCSfluVRHxxJYSmkMjpU=\", false, function () {\n  return [useQuizMethods];\n});\n\n_c = Questions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","Button","Paragraph","PARAGRAPH_STYLES","useQuizMethods","getChoicesByQuestionIndex","getQuestionByQuestionIndex","Headline","Questions","score","questionIndex","answer","questions","methods","renderAnswerElement","choice","index","checkAnswer","renderAnswers","choicesChoices","map","isLastQuestion","length","submit","restart"],"sources":["/home/ekaterina/quiz/client/src/app/component/questions/Questions.tsx"],"sourcesContent":["import React, {ReactElement} from \"react\";\nimport {Button} from \"src/app/component/button/Button\";\nimport {Paragraph, PARAGRAPH_STYLES} from \"src/app/component/paragraph/Paragraph\";\nimport {useQuizMethods} from \"src/app/component/questions/UseQuizMethods\";\nimport {getChoicesByQuestionIndex, getQuestionByQuestionIndex} from \"src/app/component/questions/Helpers\";\nimport {Headline} from \"src/app/component/headline/Headline\";\n\n/**\n * Component for displaying quiz questions and answer options\n */\nexport const Questions: React.FC = () => {\n\n  const [score, questionIndex, answer, questions, methods] = useQuizMethods();\n\n  const renderAnswerElement = (choice: string, index: number): ReactElement => {\n    return (\n      <label key={choice}>\n        <input\n          type=\"radio\"\n          name=\"choice\"\n          value={choice}\n          onChange={methods.checkAnswer}\n          checked={answer === choice}\n          key={index}\n        />\n        <span className={PARAGRAPH_STYLES}>{choice}</span>\n      </label>\n    );\n  };\n\n  const renderAnswers = (): ReactElement[] | undefined => {\n    const choicesChoices = getChoicesByQuestionIndex(questionIndex, questions);\n    return choicesChoices.map(renderAnswerElement);\n  };\n\n  const isLastQuestion = questionIndex < questions.length;\n\n  if (isLastQuestion) {\n    return (\n      <>\n        <Headline text={getQuestionByQuestionIndex(questionIndex, questions)} />\n        {renderAnswers()}\n        <Button title=\"Check\" handleClick={methods.submit} />\n        <Paragraph text={`score: ${score}`} />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Button title=\"Restart\" handleClick={methods.restart} />\n      <Paragraph text={`score: ${score}`} />\n    </>\n  );\n};"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkC,OAAlC;AACA,SAAQC,MAAR,QAAqB,iCAArB;AACA,SAAQC,SAAR,EAAmBC,gBAAnB,QAA0C,uCAA1C;AACA,SAAQC,cAAR,QAA6B,4CAA7B;AACA,SAAQC,yBAAR,EAAmCC,0BAAnC,QAAoE,qCAApE;AACA,SAAQC,QAAR,QAAuB,qCAAvB;AAEA;AACA;AACA;;;;AACA,OAAO,MAAMC,SAAmB,GAAG,MAAM;EAAA;;EAEvC,MAAM,CAACC,KAAD,EAAQC,aAAR,EAAuBC,MAAvB,EAA+BC,SAA/B,EAA0CC,OAA1C,IAAqDT,cAAc,EAAzE;;EAEA,MAAMU,mBAAmB,GAAG,CAACC,MAAD,EAAiBC,KAAjB,KAAiD;IAC3E,oBACE;MAAA,wBACE;QACE,IAAI,EAAC,OADP;QAEE,IAAI,EAAC,QAFP;QAGE,KAAK,EAAED,MAHT;QAIE,QAAQ,EAAEF,OAAO,CAACI,WAJpB;QAKE,OAAO,EAAEN,MAAM,KAAKI;MALtB,GAMOC,KANP;QAAA;QAAA;QAAA;MAAA,QADF,eASE;QAAM,SAAS,EAAEb,gBAAjB;QAAA,UAAoCY;MAApC;QAAA;QAAA;QAAA;MAAA,QATF;IAAA,GAAYA,MAAZ;MAAA;MAAA;MAAA;IAAA,QADF;EAaD,CAdD;;EAgBA,MAAMG,aAAa,GAAG,MAAkC;IACtD,MAAMC,cAAc,GAAGd,yBAAyB,CAACK,aAAD,EAAgBE,SAAhB,CAAhD;IACA,OAAOO,cAAc,CAACC,GAAf,CAAmBN,mBAAnB,CAAP;EACD,CAHD;;EAKA,MAAMO,cAAc,GAAGX,aAAa,GAAGE,SAAS,CAACU,MAAjD;;EAEA,IAAID,cAAJ,EAAoB;IAClB,oBACE;MAAA,wBACE,QAAC,QAAD;QAAU,IAAI,EAAEf,0BAA0B,CAACI,aAAD,EAAgBE,SAAhB;MAA1C;QAAA;QAAA;QAAA;MAAA,QADF,EAEGM,aAAa,EAFhB,eAGE,QAAC,MAAD;QAAQ,KAAK,EAAC,OAAd;QAAsB,WAAW,EAAEL,OAAO,CAACU;MAA3C;QAAA;QAAA;QAAA;MAAA,QAHF,eAIE,QAAC,SAAD;QAAW,IAAI,EAAG,UAASd,KAAM;MAAjC;QAAA;QAAA;QAAA;MAAA,QAJF;IAAA,gBADF;EAQD;;EAED,oBACE;IAAA,wBACE,QAAC,MAAD;MAAQ,KAAK,EAAC,SAAd;MAAwB,WAAW,EAAEI,OAAO,CAACW;IAA7C;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,SAAD;MAAW,IAAI,EAAG,UAASf,KAAM;IAAjC;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA,gBADF;AAMD,CA5CM;;GAAMD,S;UAEgDJ,c;;;KAFhDI,S"},"metadata":{},"sourceType":"module"}