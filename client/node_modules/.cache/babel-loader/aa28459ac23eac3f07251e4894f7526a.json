{"ast":null,"code":"var _jsxFileName = \"/home/ekaterina/quiz/client/src/app/component/questions/Questions.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Button } from \"src/app/component/button/Button\";\nimport { Paragraph, PARAGRAPH_STYLES } from \"src/app/component/paragraph/Paragraph\";\nimport { useGetQuestions } from \"src/app/component/questions/UseGetQuestions\";\nimport { Headline } from \"../headline/Headline\";\n/**\n * Component for displaying quiz questions and answer options\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Questions = () => {\n  _s();\n\n  // Call custom hook\n  const [score, questionIndex, answer, questions, methods] = useGetQuestions();\n\n  const renderAnswerElement = (choice, index) => {\n    return /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"choice\",\n          value: choice,\n          onChange: methods.onChange,\n          checked: answer === choice\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: PARAGRAPH_STYLES,\n          children: choice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)\n    }, choice, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  };\n\n  const getChoicesByQuestionIndex = (index, questionsList) => {\n    const question = questionsList[index];\n\n    if (!question) {\n      throw new Error(\"wrong index in array\");\n    }\n\n    return question.choices;\n  };\n\n  const renderAnswers = () => {\n    const choicesChoices = getChoicesByQuestionIndex(questionIndex, questions);\n    return choicesChoices.map(renderAnswerElement);\n  };\n\n  const isLastQuestion = questionIndex < questions.length;\n\n  const getQuestionByQuestionIndex = (index, questionsList) => {\n    const question = questionsList[index];\n\n    if (!question) {\n      throw new Error(\"wrong index in array\");\n    }\n\n    return question.question;\n  };\n\n  if (isLastQuestion) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Headline, {\n        text: getQuestionByQuestionIndex(questionIndex, questions)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), renderAnswers(), /*#__PURE__*/_jsxDEV(Button, {\n        title: \"Check\",\n        handleClick: methods.submit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n        text: `score: ${score}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      title: \"Restart\",\n      handleClick: methods.restart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n      text: `score: ${score}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Questions, \"Sv+q5k3bM+UGG6v91Zsadgp50E8=\", false, function () {\n  return [useGetQuestions];\n});\n\n_c = Questions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","Button","Paragraph","PARAGRAPH_STYLES","useGetQuestions","Headline","Questions","score","questionIndex","answer","questions","methods","renderAnswerElement","choice","index","onChange","getChoicesByQuestionIndex","questionsList","question","Error","choices","renderAnswers","choicesChoices","map","isLastQuestion","length","getQuestionByQuestionIndex","submit","restart"],"sources":["/home/ekaterina/quiz/client/src/app/component/questions/Questions.tsx"],"sourcesContent":["import React from \"react\";\nimport {Button} from \"src/app/component/button/Button\";\nimport {Paragraph, PARAGRAPH_STYLES} from \"src/app/component/paragraph/Paragraph\";\nimport {useGetQuestions} from \"src/app/component/questions/UseGetQuestions\";\nimport {QuizRoundModel} from \"src/app/model/QuizRoundModel\";\nimport {Headline} from \"../headline/Headline\";\n\n/**\n * Component for displaying quiz questions and answer options\n */\nexport const Questions: React.FC = () => {\n\n  // Call custom hook\n  const [score, questionIndex, answer, questions, methods] = useGetQuestions();\n\n\tconst renderAnswerElement = (choice: string, index: number): string[] => {\n    return (\n      <h5 key={choice}>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"choice\"\n            value={choice}\n            onChange={methods.onChange}\n            checked={answer === choice}\n            key={index}\n          />\n          <span className={PARAGRAPH_STYLES}>{choice}</span>\n        </label>\n      </h5>\n    );\n  };\n\n  const getChoicesByQuestionIndex = (index: number, questionsList: QuizRoundModel[]): string[] => {\n    const question: QuizRoundModel | undefined = questionsList[index];\n    if (!question) {\n      throw new Error(\"wrong index in array\");\n    }\n    return question.choices;\n  };\n\n  const renderAnswers = (): string[] | undefined => {\n    const choicesChoices = getChoicesByQuestionIndex(questionIndex, questions);\n    return choicesChoices.map(renderAnswerElement);\n  };\n\n  const isLastQuestion = questionIndex < questions.length;\n\n  const getQuestionByQuestionIndex = (index: number, questionsList: QuizRoundModel[]): string => {\n    const question: QuizRoundModel | undefined = questionsList[index];\n    if (!question) {\n      throw new Error(\"wrong index in array\");\n    }\n    return question.question;\n  };\n\n  if (isLastQuestion) {\n    return (\n      <>\n        <Headline text={getQuestionByQuestionIndex(questionIndex, questions)} />\n        {renderAnswers()}\n        <Button title=\"Check\" handleClick={methods.submit} />\n        <Paragraph text={`score: ${score}`} />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Button title=\"Restart\" handleClick={methods.restart} />\n      <Paragraph text={`score: ${score}`} />\n    </>\n  );\n};"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,iCAArB;AACA,SAAQC,SAAR,EAAmBC,gBAAnB,QAA0C,uCAA1C;AACA,SAAQC,eAAR,QAA8B,6CAA9B;AAEA,SAAQC,QAAR,QAAuB,sBAAvB;AAEA;AACA;AACA;;;;AACA,OAAO,MAAMC,SAAmB,GAAG,MAAM;EAAA;;EAEvC;EACA,MAAM,CAACC,KAAD,EAAQC,aAAR,EAAuBC,MAAvB,EAA+BC,SAA/B,EAA0CC,OAA1C,IAAqDP,eAAe,EAA1E;;EAED,MAAMQ,mBAAmB,GAAG,CAACC,MAAD,EAAiBC,KAAjB,KAA6C;IACtE,oBACE;MAAA,uBACE;QAAA,wBACE;UACE,IAAI,EAAC,OADP;UAEE,IAAI,EAAC,QAFP;UAGE,KAAK,EAAED,MAHT;UAIE,QAAQ,EAAEF,OAAO,CAACI,QAJpB;UAKE,OAAO,EAAEN,MAAM,KAAKI;QALtB,GAMOC,KANP;UAAA;UAAA;UAAA;QAAA,QADF,eASE;UAAM,SAAS,EAAEX,gBAAjB;UAAA,UAAoCU;QAApC;UAAA;UAAA;UAAA;QAAA,QATF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF,GAASA,MAAT;MAAA;MAAA;MAAA;IAAA,QADF;EAeD,CAhBF;;EAkBC,MAAMG,yBAAyB,GAAG,CAACF,KAAD,EAAgBG,aAAhB,KAA8D;IAC9F,MAAMC,QAAoC,GAAGD,aAAa,CAACH,KAAD,CAA1D;;IACA,IAAI,CAACI,QAAL,EAAe;MACb,MAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;IACD;;IACD,OAAOD,QAAQ,CAACE,OAAhB;EACD,CAND;;EAQA,MAAMC,aAAa,GAAG,MAA4B;IAChD,MAAMC,cAAc,GAAGN,yBAAyB,CAACR,aAAD,EAAgBE,SAAhB,CAAhD;IACA,OAAOY,cAAc,CAACC,GAAf,CAAmBX,mBAAnB,CAAP;EACD,CAHD;;EAKA,MAAMY,cAAc,GAAGhB,aAAa,GAAGE,SAAS,CAACe,MAAjD;;EAEA,MAAMC,0BAA0B,GAAG,CAACZ,KAAD,EAAgBG,aAAhB,KAA4D;IAC7F,MAAMC,QAAoC,GAAGD,aAAa,CAACH,KAAD,CAA1D;;IACA,IAAI,CAACI,QAAL,EAAe;MACb,MAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;IACD;;IACD,OAAOD,QAAQ,CAACA,QAAhB;EACD,CAND;;EAQA,IAAIM,cAAJ,EAAoB;IAClB,oBACE;MAAA,wBACE,QAAC,QAAD;QAAU,IAAI,EAAEE,0BAA0B,CAAClB,aAAD,EAAgBE,SAAhB;MAA1C;QAAA;QAAA;QAAA;MAAA,QADF,EAEGW,aAAa,EAFhB,eAGE,QAAC,MAAD;QAAQ,KAAK,EAAC,OAAd;QAAsB,WAAW,EAAEV,OAAO,CAACgB;MAA3C;QAAA;QAAA;QAAA;MAAA,QAHF,eAIE,QAAC,SAAD;QAAW,IAAI,EAAG,UAASpB,KAAM;MAAjC;QAAA;QAAA;QAAA;MAAA,QAJF;IAAA,gBADF;EAQD;;EAED,oBACE;IAAA,wBACE,QAAC,MAAD;MAAQ,KAAK,EAAC,SAAd;MAAwB,WAAW,EAAEI,OAAO,CAACiB;IAA7C;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,SAAD;MAAW,IAAI,EAAG,UAASrB,KAAM;IAAjC;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA,gBADF;AAMD,CA/DM;;GAAMD,S;UAGgDF,e;;;KAHhDE,S"},"metadata":{},"sourceType":"module"}