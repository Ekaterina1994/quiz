{"ast":null,"code":"// import { questionsRoundDTO } from \"./IQuestionsDTO\";\nexport const convertToDTOProject = project => {\n  return {\n    id: project.id,\n    name: project.name,\n    shortName: project.shortName,\n    description: project.description\n  };\n};\n/**\n * Class which use when the client have internet\n */\n\nexport class QuizService {\n  constructor(baseUrl) {\n    this.baseUrl = void 0;\n    this.baseUrl = baseUrl;\n  }\n  /**\n  * Method which return data\n  */\n\n\n  async getQuestions() {\n    const url = this.baseUrl;\n    const {\n      content: questionsRoundDTO\n    } = await fetchRequest.get(url);\n    const questions = questionsRoundDTO.map(convertToProject);\n    return questions;\n  }\n\n}\nvar FetchMethod;\n\n(function (FetchMethod) {\n  FetchMethod[\"GET\"] = \"GET\";\n  FetchMethod[\"POST\"] = \"POST\";\n  FetchMethod[\"PUT\"] = \"PUT\";\n  FetchMethod[\"DELETE\"] = \"DELETE\";\n})(FetchMethod || (FetchMethod = {}));\n\nconst request = async (url, method, body) => {\n  const stringifiedBody = JSON.stringify(body);\n  const rawResponse = await fetch(url, {\n    method,\n    headers: {\n      accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: stringifiedBody\n  }); // обработка ответа\n\n  if (rawResponse.ok) {\n    return method !== FetchMethod.DELETE ? await rawResponse.json() : undefined;\n  }\n\n  throw new Error(String(rawResponse.status));\n};\n\nexport const fetchRequest = {\n  /**\n   * Создание get запроса\n   */\n  get: async url => request(url, FetchMethod.GET)\n};","map":{"version":3,"names":["convertToDTOProject","project","id","name","shortName","description","QuizService","constructor","baseUrl","getQuestions","url","content","questionsRoundDTO","fetchRequest","get","questions","map","convertToProject","FetchMethod","request","method","body","stringifiedBody","JSON","stringify","rawResponse","fetch","headers","accept","ok","DELETE","json","undefined","Error","String","status","GET"],"sources":["/home/ekaterina/quiz/client/src/app/service/QuizService.ts"],"sourcesContent":["import {QuizRound} from \"src/app/model/QuizRoundModel\";\n// import { questionsRoundDTO } from \"./IQuestionsDTO\";\n\nexport type DTO<T> = Record<keyof T, unknown>\n\nexport const convertToDTOProject = (project: Project): DTO<Project> => {\n\treturn {\n\t\t\tid: project.id,\n\t\t\tname: project.name,\n\t\t\tshortName: project.shortName,\n\t\t\tdescription: project.description,\n\t};\n};\n\n\n/**\n * Class which use when the client have internet\n */\nexport class QuizService {\n\n  private baseUrl: string;\n\n  constructor(baseUrl: string) {\n    this.baseUrl = baseUrl;\n  }\n\n  /**\n\t * Method which return data\n\t */\n  public async getQuestions(): Promise<QuizRound[]> {\n    const url = this.baseUrl;\n    const {content: questionsRoundDTO} = await fetchRequest.get(url);\n\n    const questions = questionsRoundDTO.map(convertToProject);\n\n    return questions;\n  }\n\n}\n\nenum FetchMethod {\n\tGET = 'GET',\n\tPOST = 'POST',\n\tPUT = 'PUT',\n\tDELETE = 'DELETE',\n}\n\nconst request = async (url: string, method: FetchMethod, body?: unknown | undefined) => {\n\tconst stringifiedBody = JSON.stringify(body);\n\tconst rawResponse = await fetch(url, {\n\t\t\tmethod,\n\t\t\theaders: {\n\t\t\t\t\taccept: 'application/json',\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: stringifiedBody,\n\t});\n\n\t// обработка ответа\n\tif (rawResponse.ok) {\n\t\t\treturn method !== FetchMethod.DELETE\n\t\t\t\t\t? await rawResponse.json()\n\t\t\t\t\t: undefined;\n\t}\n\n\tthrow new Error(String(rawResponse.status));\n};\n\nexport const fetchRequest = {\n\n\t/**\n\t * Создание get запроса\n\t */\n\tget: async <T>(url: string): Promise<T> => request(url, FetchMethod.GET),\n\n};\n"],"mappings":"AACA;AAIA,OAAO,MAAMA,mBAAmB,GAAIC,OAAD,IAAoC;EACtE,OAAO;IACLC,EAAE,EAAED,OAAO,CAACC,EADP;IAELC,IAAI,EAAEF,OAAO,CAACE,IAFT;IAGLC,SAAS,EAAEH,OAAO,CAACG,SAHd;IAILC,WAAW,EAAEJ,OAAO,CAACI;EAJhB,CAAP;AAMA,CAPM;AAUP;AACA;AACA;;AACA,OAAO,MAAMC,WAAN,CAAkB;EAIvBC,WAAW,CAACC,OAAD,EAAkB;IAAA,KAFrBA,OAEqB;IAC3B,KAAKA,OAAL,GAAeA,OAAf;EACD;EAED;AACF;AACA;;;EAC2B,MAAZC,YAAY,GAAyB;IAChD,MAAMC,GAAG,GAAG,KAAKF,OAAjB;IACA,MAAM;MAACG,OAAO,EAAEC;IAAV,IAA+B,MAAMC,YAAY,CAACC,GAAb,CAAiBJ,GAAjB,CAA3C;IAEA,MAAMK,SAAS,GAAGH,iBAAiB,CAACI,GAAlB,CAAsBC,gBAAtB,CAAlB;IAEA,OAAOF,SAAP;EACD;;AAlBsB;IAsBpBG,W;;WAAAA,W;EAAAA,W;EAAAA,W;EAAAA,W;EAAAA,W;GAAAA,W,KAAAA,W;;AAOL,MAAMC,OAAO,GAAG,OAAOT,GAAP,EAAoBU,MAApB,EAAyCC,IAAzC,KAAwE;EACvF,MAAMC,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAxB;EACA,MAAMI,WAAW,GAAG,MAAMC,KAAK,CAAChB,GAAD,EAAM;IACnCU,MADmC;IAEnCO,OAAO,EAAE;MACPC,MAAM,EAAE,kBADD;MAEP,gBAAgB;IAFT,CAF0B;IAMnCP,IAAI,EAAEC;EAN6B,CAAN,CAA/B,CAFuF,CAWvF;;EACA,IAAIG,WAAW,CAACI,EAAhB,EAAoB;IAClB,OAAOT,MAAM,KAAKF,WAAW,CAACY,MAAvB,GACH,MAAML,WAAW,CAACM,IAAZ,EADH,GAEHC,SAFJ;EAGD;;EAED,MAAM,IAAIC,KAAJ,CAAUC,MAAM,CAACT,WAAW,CAACU,MAAb,CAAhB,CAAN;AACA,CAnBD;;AAqBA,OAAO,MAAMtB,YAAY,GAAG;EAE3B;AACD;AACA;EACCC,GAAG,EAAE,MAAUJ,GAAV,IAAsCS,OAAO,CAACT,GAAD,EAAMQ,WAAW,CAACkB,GAAlB;AALvB,CAArB"},"metadata":{},"sourceType":"module"}