{"ast":null,"code":"// import {request} from \"src/app/service/request\";\n// import {FetchMethod} from \"./enu\";\nexport let FetchMethod;\n\n(function (FetchMethod) {\n  FetchMethod[\"GET\"] = \"GET\";\n  FetchMethod[\"POST\"] = \"POST\";\n  FetchMethod[\"PUT\"] = \"PUT\";\n  FetchMethod[\"DELETE\"] = \"DELETE\";\n})(FetchMethod || (FetchMethod = {}));\n\nexport const request = async (url, method, body) => {\n  const stringifiedBody = JSON.stringify(body);\n  const rawResponse = await fetch(url, {\n    method,\n    body: stringifiedBody\n  }); // обработка ответа\n\n  if (rawResponse.ok) {\n    return method !== FetchMethod.DELETE ? rawResponse.json() : undefined;\n  }\n\n  throw new Error(String(rawResponse.status));\n};\nexport const fetchRequest = {\n  /**\n  * Создание get запроса\n  */\n  get: async url => {\n    return request(url, FetchMethod.GET);\n  },\n  post: async (url, body) => {\n    return request(url, FetchMethod.POST, body);\n  },\n\n  /**\n     * Создание put запроса\n     */\n  put: async (url, body) => {\n    return request(url, FetchMethod.PUT, body);\n  },\n\n  /**\n     * Создание delete запроса\n     */\n  delete: async url => {\n    return request(url, FetchMethod.DELETE);\n  }\n};","map":{"version":3,"names":["FetchMethod","request","url","method","body","stringifiedBody","JSON","stringify","rawResponse","fetch","ok","DELETE","json","undefined","Error","String","status","fetchRequest","get","GET","post","POST","put","PUT","delete"],"sources":["/home/ekaterina/quiz/client/src/app/service/fetchUtils.ts"],"sourcesContent":["// import {request} from \"src/app/service/request\";\n// import {FetchMethod} from \"./enu\";\nimport {QuizRound} from \"../model/QuizRoundModel\";\n\nexport enum FetchMethod {\n  GET = \"GET\",\n  POST = \"POST\",\n  PUT = \"PUT\",\n  DELETE = \"DELETE\",\n}\n\nexport const request = async (url: string, method: FetchMethod, body?: QuizRound): Promise<FetchMethod> => {\n  const stringifiedBody = JSON.stringify(body);\n  const rawResponse = await fetch(url, {\n    method,\n    body: stringifiedBody,\n  });\n\n  // обработка ответа\n  if (rawResponse.ok) {\n    return method !== FetchMethod.DELETE\n      ? rawResponse.json()\n      : undefined;\n  }\n\n  throw new Error(String(rawResponse.status));\n};\n\nexport const fetchRequest = {\n\n  /**\n\t * Создание get запроса\n\t */\n  get: async <T>(url: string): Promise<T> => { return request(url, FetchMethod.GET); },\n  post: async <T>(url: string, body?: unknown): Promise<T> => {return request(url, FetchMethod.POST, body);},\n\n  /**\n     * Создание put запроса\n     */\n  put: async <T>(url: string, body?: unknown): Promise<T> => {return request(url, FetchMethod.PUT, body);},\n\n  /**\n     * Создание delete запроса\n     */\n  delete: async <T>(url: string): Promise<T> => {return request(url, FetchMethod.DELETE);},\n\n};"],"mappings":"AAAA;AACA;AAGA,WAAYA,WAAZ;;WAAYA,W;EAAAA,W;EAAAA,W;EAAAA,W;EAAAA,W;GAAAA,W,KAAAA,W;;AAOZ,OAAO,MAAMC,OAAO,GAAG,OAAOC,GAAP,EAAoBC,MAApB,EAAyCC,IAAzC,KAAoF;EACzG,MAAMC,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAxB;EACA,MAAMI,WAAW,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAM;IACnCC,MADmC;IAEnCC,IAAI,EAAEC;EAF6B,CAAN,CAA/B,CAFyG,CAOzG;;EACA,IAAIG,WAAW,CAACE,EAAhB,EAAoB;IAClB,OAAOP,MAAM,KAAKH,WAAW,CAACW,MAAvB,GACHH,WAAW,CAACI,IAAZ,EADG,GAEHC,SAFJ;EAGD;;EAED,MAAM,IAAIC,KAAJ,CAAUC,MAAM,CAACP,WAAW,CAACQ,MAAb,CAAhB,CAAN;AACD,CAfM;AAiBP,OAAO,MAAMC,YAAY,GAAG;EAE1B;AACF;AACA;EACEC,GAAG,EAAE,MAAUhB,GAAV,IAAsC;IAAE,OAAOD,OAAO,CAACC,GAAD,EAAMF,WAAW,CAACmB,GAAlB,CAAd;EAAuC,CAL1D;EAM1BC,IAAI,EAAE,OAAUlB,GAAV,EAAuBE,IAAvB,KAAsD;IAAC,OAAOH,OAAO,CAACC,GAAD,EAAMF,WAAW,CAACqB,IAAlB,EAAwBjB,IAAxB,CAAd;EAA6C,CANhF;;EAQ1B;AACF;AACA;EACEkB,GAAG,EAAE,OAAUpB,GAAV,EAAuBE,IAAvB,KAAsD;IAAC,OAAOH,OAAO,CAACC,GAAD,EAAMF,WAAW,CAACuB,GAAlB,EAAuBnB,IAAvB,CAAd;EAA4C,CAX9E;;EAa1B;AACF;AACA;EACEoB,MAAM,EAAE,MAAUtB,GAAV,IAAsC;IAAC,OAAOD,OAAO,CAACC,GAAD,EAAMF,WAAW,CAACW,MAAlB,CAAd;EAAyC;AAhB9D,CAArB"},"metadata":{},"sourceType":"module"}