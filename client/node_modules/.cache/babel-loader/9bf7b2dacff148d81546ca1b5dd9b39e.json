{"ast":null,"code":"// import { questionsRoundDTO } from \"./IQuestionsDTO\";\nexport const convertToDTOProject = quizRound => {\n  return {\n    question: quizRound.question,\n    choices: quizRound.choices,\n    rightAnswer: quizRound.rightAnswer,\n    key: quizRound.key\n  };\n};\nexport const fetchRequest = {\n  /**\n  * Создание get запроса\n  */\n  get: async url => {\n    return request(url, FetchMethod.GET);\n  }\n};\n/**\n * Class which use when the client have internet\n */\n\nexport class QuizService {\n  constructor(baseUrl) {\n    this.baseUrl = void 0;\n    this.baseUrl = baseUrl;\n  }\n  /**\n  * Method which return data\n  */\n\n\n  async getQuestions() {\n    const url = this.baseUrl;\n    const {\n      content: questionsRoundDTO\n    } = await fetchRequest.get(url);\n    const questions = questionsRoundDTO.map(convertToDTOProject);\n    return questions;\n  }\n\n}\nvar FetchMethod;\n\n(function (FetchMethod) {\n  FetchMethod[\"GET\"] = \"GET\";\n  FetchMethod[\"POST\"] = \"POST\";\n  FetchMethod[\"PUT\"] = \"PUT\";\n  FetchMethod[\"DELETE\"] = \"DELETE\";\n})(FetchMethod || (FetchMethod = {}));","map":{"version":3,"names":["convertToDTOProject","quizRound","question","choices","rightAnswer","key","fetchRequest","get","url","request","FetchMethod","GET","QuizService","constructor","baseUrl","getQuestions","content","questionsRoundDTO","questions","map"],"sources":["/home/ekaterina/quiz/client/src/app/service/QuizService.ts"],"sourcesContent":["import {QuizRound} from \"src/app/model/QuizRoundModel\";\n// import { questionsRoundDTO } from \"./IQuestionsDTO\";\n\nexport type DTO<T> = Record<keyof T, unknown>\n\nexport const convertToDTOProject = (quizRound: QuizRound): DTO<QuizRound> => {\n  return {\n    question: quizRound.question,\n    choices: quizRound.choices,\n    rightAnswer: quizRound.rightAnswer,\n    key: quizRound.key,\n  };\n};\n\nexport const fetchRequest = {\n\n  /**\n\t * Создание get запроса\n\t */\n  get: async <T>(url: string): Promise<T> => {return request(url, FetchMethod.GET);},\n\n};\n\n/**\n * Class which use when the client have internet\n */\nexport class QuizService {\n\n  private baseUrl: string;\n\n  constructor(baseUrl: string) {\n    this.baseUrl = baseUrl;\n  }\n\n  /**\n\t * Method which return data\n\t */\n  public async getQuestions(): Promise<QuizRound[]> {\n    const url = this.baseUrl;\n    const {content: questionsRoundDTO} = await fetchRequest.get(url);\n\n    const questions = questionsRoundDTO.map(convertToDTOProject);\n\n    return questions;\n  }\n\n}\n\nenum FetchMethod {\n  GET = \"GET\",\n  POST = \"POST\",\n  PUT = \"PUT\",\n  DELETE = \"DELETE\",\n}\n\n\n\n\n"],"mappings":"AACA;AAIA,OAAO,MAAMA,mBAAmB,GAAIC,SAAD,IAA0C;EAC3E,OAAO;IACLC,QAAQ,EAAED,SAAS,CAACC,QADf;IAELC,OAAO,EAAEF,SAAS,CAACE,OAFd;IAGLC,WAAW,EAAEH,SAAS,CAACG,WAHlB;IAILC,GAAG,EAAEJ,SAAS,CAACI;EAJV,CAAP;AAMD,CAPM;AASP,OAAO,MAAMC,YAAY,GAAG;EAE1B;AACF;AACA;EACEC,GAAG,EAAE,MAAUC,GAAV,IAAsC;IAAC,OAAOC,OAAO,CAACD,GAAD,EAAME,WAAW,CAACC,GAAlB,CAAd;EAAsC;AALxD,CAArB;AASP;AACA;AACA;;AACA,OAAO,MAAMC,WAAN,CAAkB;EAIvBC,WAAW,CAACC,OAAD,EAAkB;IAAA,KAFrBA,OAEqB;IAC3B,KAAKA,OAAL,GAAeA,OAAf;EACD;EAED;AACF;AACA;;;EAC2B,MAAZC,YAAY,GAAyB;IAChD,MAAMP,GAAG,GAAG,KAAKM,OAAjB;IACA,MAAM;MAACE,OAAO,EAAEC;IAAV,IAA+B,MAAMX,YAAY,CAACC,GAAb,CAAiBC,GAAjB,CAA3C;IAEA,MAAMU,SAAS,GAAGD,iBAAiB,CAACE,GAAlB,CAAsBnB,mBAAtB,CAAlB;IAEA,OAAOkB,SAAP;EACD;;AAlBsB;IAsBpBR,W;;WAAAA,W;EAAAA,W;EAAAA,W;EAAAA,W;EAAAA,W;GAAAA,W,KAAAA,W"},"metadata":{},"sourceType":"module"}