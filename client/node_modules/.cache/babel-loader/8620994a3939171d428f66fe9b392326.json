{"ast":null,"code":"import { FetchMethod } from \"./enu\";\nimport { convertToProject } from \"./convert\";\nimport { request } from \"src/app/service/request\"; // import { questionsRoundDTO } from \"./IQuestionsDTO\";\n\nexport const fetchRequest = {\n  /**\n  * Создание get запроса\n  */\n  get: async url => {\n    return request(url, FetchMethod.GET);\n  }\n};\n/**\n * Class which use when the client have internet\n */\n\nexport class QuizService {\n  constructor(baseUrl) {\n    this.baseUrl = void 0;\n    this.baseUrl = baseUrl;\n  }\n  /**\n  * Method which return data\n  */\n\n\n  async getQuestions() {\n    const url = this.baseUrl;\n    const {\n      content: questionsRoundDTO\n    } = await fetchRequest.get(url);\n    const questions = questionsRoundDTO.map(convertToProject);\n    return questions;\n  }\n\n}","map":{"version":3,"names":["FetchMethod","convertToProject","request","fetchRequest","get","url","GET","QuizService","constructor","baseUrl","getQuestions","content","questionsRoundDTO","questions","map"],"sources":["/home/ekaterina/quiz/client/src/app/service/QuizService.ts"],"sourcesContent":["import {QuizRound} from \"src/app/model/QuizRoundModel\";\nimport {FetchMethod} from \"./enu\";\nimport {DTO} from \"./typ\";\nimport { convertToProject } from \"./convert\";\nimport {request} from \"src/app/service/request\";\n// import { questionsRoundDTO } from \"./IQuestionsDTO\";\n\nexport const fetchRequest = {\n\n  /**\n\t * Создание get запроса\n\t */\n  get: async <T>(url: string): Promise<T> => {return request(url, FetchMethod.GET);},\n\n};\n\n/**\n * Class which use when the client have internet\n */\nexport class QuizService {\n\n  private baseUrl: string;\n\n  constructor(baseUrl: string) {\n    this.baseUrl = baseUrl;\n  }\n\n  /**\n\t * Method which return data\n\t */\n  public async getQuestions(): Promise<QuizRound[]> {\n    const url = this.baseUrl;\n    const {content: questionsRoundDTO} = await fetchRequest.get(url);\n\n    const questions = questionsRoundDTO.map(convertToProject);\n\n    return questions;\n  }\n\n}\n"],"mappings":"AACA,SAAQA,WAAR,QAA0B,OAA1B;AAEA,SAASC,gBAAT,QAAiC,WAAjC;AACA,SAAQC,OAAR,QAAsB,yBAAtB,C,CACA;;AAEA,OAAO,MAAMC,YAAY,GAAG;EAE1B;AACF;AACA;EACEC,GAAG,EAAE,MAAUC,GAAV,IAAsC;IAAC,OAAOH,OAAO,CAACG,GAAD,EAAML,WAAW,CAACM,GAAlB,CAAd;EAAsC;AALxD,CAArB;AASP;AACA;AACA;;AACA,OAAO,MAAMC,WAAN,CAAkB;EAIvBC,WAAW,CAACC,OAAD,EAAkB;IAAA,KAFrBA,OAEqB;IAC3B,KAAKA,OAAL,GAAeA,OAAf;EACD;EAED;AACF;AACA;;;EAC2B,MAAZC,YAAY,GAAyB;IAChD,MAAML,GAAG,GAAG,KAAKI,OAAjB;IACA,MAAM;MAACE,OAAO,EAAEC;IAAV,IAA+B,MAAMT,YAAY,CAACC,GAAb,CAAiBC,GAAjB,CAA3C;IAEA,MAAMQ,SAAS,GAAGD,iBAAiB,CAACE,GAAlB,CAAsBb,gBAAtB,CAAlB;IAEA,OAAOY,SAAP;EACD;;AAlBsB"},"metadata":{},"sourceType":"module"}