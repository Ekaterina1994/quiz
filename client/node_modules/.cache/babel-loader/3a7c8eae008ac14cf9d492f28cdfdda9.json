{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useGetQuestions from \"./UseGetQuestions\";\n/**\n * Custom hook function\n * @returns score, questionIndex, answer, data and methods: onChange, submit, restart\n */\n\nconst useHooks = () => {\n  _s();\n\n  const [score, setScore] = useState(0);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [answer, setAnswer] = useState(\"\");\n  const [question] = useGetQuestions(); // Function for set Score to 0\n\n  const restart = () => {\n    setScore(0);\n    setAnswer(\"\");\n    setQuestionIndex(0);\n  }; // Function for to send answer. If its right answer - number of points grow\n\n\n  const submit = event => {\n    event.preventDefault();\n\n    if (question) {\n      var _question$questionInd;\n\n      const isRightAnswer = answer === ((_question$questionInd = question[questionIndex]) === null || _question$questionInd === void 0 ? void 0 : _question$questionInd.rightAnswer);\n\n      if (isRightAnswer) {\n        setScore(score + 1);\n      }\n\n      const isMoreQuestionsAvailable = questionIndex < question.length;\n\n      if (isMoreQuestionsAvailable) {\n        setQuestionIndex(questionIndex + 1);\n      }\n    }\n  }; // Function, keeps track of the selected answer\n\n\n  const onChange = e => {\n    setAnswer(e.target.value);\n  };\n\n  const methods = {\n    onChange,\n    submit,\n    restart\n  };\n  return [score, questionIndex, answer, question, methods];\n};\n\n_s(useHooks, \"wb+6qqojJ7ThWH1niWhYgDt9Ri8=\", false, function () {\n  return [useGetQuestions];\n});\n\nexport default useHooks;","map":{"version":3,"names":["useState","useGetQuestions","useHooks","score","setScore","questionIndex","setQuestionIndex","answer","setAnswer","question","restart","submit","event","preventDefault","isRightAnswer","rightAnswer","isMoreQuestionsAvailable","length","onChange","e","target","value","methods"],"sources":["/home/ekaterina/quiz/client/src/app/component/questions/UseHooks.ts"],"sourcesContent":["import React, {useState} from \"react\";\nimport {QuizRound} from \"src/app/model/QuizRoundModel\";\nimport useGetQuestions from \"./UseGetQuestions\";\n\n/**\n * Custom hook function\n * @returns score, questionIndex, answer, data and methods: onChange, submit, restart\n */\nconst useHooks = (): [number, number, string, QuizRound[], {onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  submit: (event: React.MouseEvent) => void; restart: () => void;}] => {\n\n  const [score, setScore] = useState<number>(0);\n  const [questionIndex, setQuestionIndex] = useState<number>(0);\n  const [answer, setAnswer] = useState<string>(\"\");\n  const [question] = useGetQuestions();\n\n  // Function for set Score to 0\n  const restart: () => void = () => {\n    setScore(0);\n    setAnswer(\"\");\n    setQuestionIndex(0);\n  };\n\n  // Function for to send answer. If its right answer - number of points grow\n  const submit: (event: React.MouseEvent) => void = (\n    event: React.MouseEvent,\n  ) => {\n    event.preventDefault();\n    if (question) {\n      const isRightAnswer: boolean = answer === question[questionIndex]?.rightAnswer;\n      if (isRightAnswer) {\n        setScore(score + 1);\n      }\n\n      const isMoreQuestionsAvailable: boolean = questionIndex < question.length;\n      if (isMoreQuestionsAvailable) {\n        setQuestionIndex(questionIndex + 1);\n      }\n    }\n  };\n\n  // Function, keeps track of the selected answer\n  const onChange: (e: React.ChangeEvent<HTMLInputElement>) => void = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setAnswer(e.target.value);\n  };\n\n  const methods = {onChange, submit, restart};\n\n  return [score, questionIndex, answer, question, methods];\n};\n\nexport default useHooks;"],"mappings":";;AAAA,SAAeA,QAAf,QAA8B,OAA9B;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA;AACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAG,MACsD;EAAA;;EAErE,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAS,CAAT,CAAlC;EACA,MAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAS,CAAT,CAAlD;EACA,MAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAS,EAAT,CAApC;EACA,MAAM,CAACS,QAAD,IAAaR,eAAe,EAAlC,CALqE,CAOrE;;EACA,MAAMS,OAAmB,GAAG,MAAM;IAChCN,QAAQ,CAAC,CAAD,CAAR;IACAI,SAAS,CAAC,EAAD,CAAT;IACAF,gBAAgB,CAAC,CAAD,CAAhB;EACD,CAJD,CARqE,CAcrE;;;EACA,MAAMK,MAAyC,GAC7CC,KADgD,IAE7C;IACHA,KAAK,CAACC,cAAN;;IACA,IAAIJ,QAAJ,EAAc;MAAA;;MACZ,MAAMK,aAAsB,GAAGP,MAAM,+BAAKE,QAAQ,CAACJ,aAAD,CAAb,0DAAK,sBAAyBU,WAA9B,CAArC;;MACA,IAAID,aAAJ,EAAmB;QACjBV,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;MACD;;MAED,MAAMa,wBAAiC,GAAGX,aAAa,GAAGI,QAAQ,CAACQ,MAAnE;;MACA,IAAID,wBAAJ,EAA8B;QAC5BV,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;MACD;IACF;EACF,CAfD,CAfqE,CAgCrE;;;EACA,MAAMa,QAA0D,GAAIC,CAAD,IAA4C;IAC7GX,SAAS,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;EACD,CAFD;;EAIA,MAAMC,OAAO,GAAG;IAACJ,QAAD;IAAWP,MAAX;IAAmBD;EAAnB,CAAhB;EAEA,OAAO,CAACP,KAAD,EAAQE,aAAR,EAAuBE,MAAvB,EAA+BE,QAA/B,EAAyCa,OAAzC,CAAP;AACD,CAzCD;;GAAMpB,Q;UAMeD,e;;;AAqCrB,eAAeC,QAAf"},"metadata":{},"sourceType":"module"}