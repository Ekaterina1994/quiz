{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useQuizRounds } from \"src/app/component/questions/UseQuizRounds\";\nimport { getAnswerByQuestionIndex } from \"src/app/component/questions/Helpers\";\n/**\n *\n * @returns score - stores the state of the current total score;\n *          questionIndex - stores the state of the question number;\n *          answer - stores the state of the selected response;\n *          questions - stores the data state of the current quiz round;\n *          methods: onChange, submit, restart\n */\n\nexport const useQuizMethods = () => {\n  _s();\n\n  const [score, setScore] = useState(0);\n  const questions = useQuizRounds();\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [answer, setAnswer] = useState(\"\");\n\n  const restart = () => {\n    setScore(0);\n    setAnswer(\"\");\n    setQuestionIndex(0);\n  }; // Send answer. If its right answer - number of points grow\n\n\n  const submit = event => {\n    event.preventDefault();\n    const rightAnswer = getAnswerByQuestionIndex(questionIndex, questions);\n    const isRightAnswer = answer === rightAnswer;\n    const isMoreQuestionsAvailable = questionIndex < questions.length;\n\n    if (isRightAnswer) {\n      setScore(score + 1);\n    }\n\n    if (isMoreQuestionsAvailable) {\n      setQuestionIndex(questionIndex + 1);\n    }\n  }; // Keeps track of the selected answer\n  // const onChange: (e: React.ChangeEvent<HTMLInputElement>) => void = (e: React.ChangeEvent<HTMLInputElement>) => {\n  //   setAnswer(e.target.value);\n  // };\n  // alias\n\n\n  const checkAnswer = e => {\n    setAnswer(e.target.value);\n  };\n\n  const methods = {\n    checkAnswer,\n    submit,\n    restart\n  };\n  return [score, questionIndex, answer, questions, methods];\n};\n\n_s(useQuizMethods, \"OBjnbtTEmn4AKqgIOr/sb1Ag/fA=\", false, function () {\n  return [useQuizRounds];\n});","map":{"version":3,"names":["useState","useQuizRounds","getAnswerByQuestionIndex","useQuizMethods","score","setScore","questions","questionIndex","setQuestionIndex","answer","setAnswer","restart","submit","event","preventDefault","rightAnswer","isRightAnswer","isMoreQuestionsAvailable","length","checkAnswer","e","target","value","methods"],"sources":["/home/ekaterina/quiz/client/src/app/component/questions/UseQuizMethods.ts"],"sourcesContent":["import React, {useState} from \"react\";\nimport {QuizRoundModel} from \"src/app/model/QuizRoundModel\";\nimport {useQuizRounds} from \"src/app/component/questions/UseQuizRounds\";\nimport {getAnswerByQuestionIndex} from \"src/app/component/questions/Helpers\";\n\n/**\n *\n * @returns score - stores the state of the current total score;\n *          questionIndex - stores the state of the question number;\n *          answer - stores the state of the selected response;\n *          questions - stores the data state of the current quiz round;\n *          methods: onChange, submit, restart\n */\nexport const useQuizMethods = (): [\n  number,\n  number,\n  string,\n  QuizRoundModel[],\n  {\n    checkAnswer: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    submit: (event: React.MouseEvent) => void;\n    restart: () => void;\n  }] => {\n\n  const [score, setScore] = useState<number>(0);\n  const questions = useQuizRounds();\n  const [questionIndex, setQuestionIndex] = useState<number>(0);\n  const [answer, setAnswer] = useState<string>(\"\");\n\n  const restart: () => void = () => {\n    setScore(0);\n    setAnswer(\"\");\n    setQuestionIndex(0);\n  };\n\n  // Send answer. If its right answer - number of points grow\n  const submit: (event: React.MouseEvent) => void = (\n    event: React.MouseEvent,\n  ) => {\n    event.preventDefault();\n\n    const rightAnswer = getAnswerByQuestionIndex(questionIndex, questions);\n    const isRightAnswer: boolean = answer === rightAnswer;\n    const isMoreQuestionsAvailable: boolean = questionIndex < questions.length;\n\n    if (isRightAnswer) {\n      setScore(score + 1);\n    }\n\n    if (isMoreQuestionsAvailable) {\n      setQuestionIndex(questionIndex + 1);\n    }\n  };\n\n  // Keeps track of the selected answer\n  // const onChange: (e: React.ChangeEvent<HTMLInputElement>) => void = (e: React.ChangeEvent<HTMLInputElement>) => {\n  //   setAnswer(e.target.value);\n  // };\n  // alias\n  type OnChangeHandler<T> = (e: React.ChangeEvent<T>) => void;\n  const checkAnswer: OnChangeHandler<HTMLInputElement> = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setAnswer(e.target.value);\n  };\n\n  const methods = {checkAnswer, submit, restart};\n\n  return [score, questionIndex, answer, questions, methods];\n};\n"],"mappings":";;AAAA,SAAeA,QAAf,QAA8B,OAA9B;AAEA,SAAQC,aAAR,QAA4B,2CAA5B;AACA,SAAQC,wBAAR,QAAuC,qCAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,MAStB;EAAA;;EAEN,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAS,CAAT,CAAlC;EACA,MAAMM,SAAS,GAAGL,aAAa,EAA/B;EACA,MAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAS,CAAT,CAAlD;EACA,MAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAS,EAAT,CAApC;;EAEA,MAAMW,OAAmB,GAAG,MAAM;IAChCN,QAAQ,CAAC,CAAD,CAAR;IACAK,SAAS,CAAC,EAAD,CAAT;IACAF,gBAAgB,CAAC,CAAD,CAAhB;EACD,CAJD,CAPM,CAaN;;;EACA,MAAMI,MAAyC,GAC7CC,KADgD,IAE7C;IACHA,KAAK,CAACC,cAAN;IAEA,MAAMC,WAAW,GAAGb,wBAAwB,CAACK,aAAD,EAAgBD,SAAhB,CAA5C;IACA,MAAMU,aAAsB,GAAGP,MAAM,KAAKM,WAA1C;IACA,MAAME,wBAAiC,GAAGV,aAAa,GAAGD,SAAS,CAACY,MAApE;;IAEA,IAAIF,aAAJ,EAAmB;MACjBX,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;IACD;;IAED,IAAIa,wBAAJ,EAA8B;MAC5BT,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;IACD;EACF,CAhBD,CAdM,CAgCN;EACA;EACA;EACA;EACA;;;EAEA,MAAMY,WAA8C,GAAIC,CAAD,IAA4C;IACjGV,SAAS,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;EACD,CAFD;;EAIA,MAAMC,OAAO,GAAG;IAACJ,WAAD;IAAcP,MAAd;IAAsBD;EAAtB,CAAhB;EAEA,OAAO,CAACP,KAAD,EAAQG,aAAR,EAAuBE,MAAvB,EAA+BH,SAA/B,EAA0CiB,OAA1C,CAAP;AACD,CAtDM;;GAAMpB,c;UAYOF,a"},"metadata":{},"sourceType":"module"}